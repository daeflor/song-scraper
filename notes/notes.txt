***** Notes *****

** Known Issues **

	- If multiple playlists have the same name, their info will likely just get overridden. 
	- The comparison can be wrong about which specific track was removed from a playlist. This happens when there were duplicates and only the earlier (lower index) of the two tracks was removed. 
	- Getting playlist name currently doesn't work if there's a hyphen in the name (Needs confirmation)
	- If you add or remove a song from a playlist, the icon won't update automatically (currently by deisgn). But even after a refresh it sometimes doesn't update. A hard refresh does cause it to update though. 
	- It's possible for the tracklist name to overlap with the username if either of them are long enough.
	- If you have multiple YTM tracklist tabs open and switch between them without refreshing the page, the extension will use incorrect cached metadata and it will become a mess. In the worst case, this could lead to playlist data being erroneously overridden in Firestore.


** Upcoming To-Do List **

	2025:
	- I think it would make sense for each class in custom-classes.js to have its own file
	- Delete unused content-scraper.js file
	- Fix issue where every 100th track doesn't get scraped properly
	- Investigate and try to fix issue where metadata doesn't refresh properly when switching to a different page without refreshing the site.
	- Consider changing structure for saving/accessing global variables in content scripts (e.g. saving everything under globalThis.songScraper.xyz)
	- Consider adding await/async to ytm-dom-scraper.js if possible, to increase readability.
	
	2022: 
	- Go through the list of songs missing after the ytm transition and address them as applicable
	- Consider adding option to list all disabled tracks in a playlist
	- Make sure chrome.runtime.lastError checks are actually useful / being used correctly. The old-style checks will not work for api calls made with await.
	- Make more use of Object.hasOwn() where possible
	- Could flesh out debug controller to deal with and pass along all errors, while also updating the extension icon to indicate an issue. 
	- Consider upgrading to Firebase SDK 9. This may allow Firestore access from service worker.
	- Are access-firestore.js, static.js, and sandbox.js being used? I believed these were committed in error in commit 158ec62
	- Deprecate unused files as applicable, including legacy js files, sandbox files, and static js files
	- Feature: Consider displaying the delta tracklists by default once a scrape has been completed

	2021:
	- Maybe exclude the 'unplayable' column from tracktables when empty (see TODO)
	- Maybe change Import names in EventController (and other places?)?
	- Clean up logic to set up landing page in AppNavigator & consolidate it with other similar logic; then remove deprecated html
	- Overall cleanup
	- Element/DOM validation
	- Clean up CSS
	- Feature: Would be helpful to add the track index number into the tracklist DOM
	- Maybe switch away from typeof === 'object' checks, since this doesn't discount a value of null.
	- Update or remove 'catch' blocks that aren't actually handling errors at all or aren't useful.
	- Fix up modules once Chrome 91 is out (end of May?). (Update: This is now partially done.)
	- Maybe bring back DebugController usage, and update the extension icon whenever an error is hit.
	- Convert some console.errors to throw new Errors where applicable.
	- Feature: Could use the list of scraped playlists to notify if there are any playlists that haven't been stored in Firestore.
	- Feature: Could have a context menu for when you click on a track (not sure the context menu actually knows the element it's been clicked on) that scrubs through all stored playlists and lists the ones that contain that track.
		- YTM overrides the right-click context menu, so this might not work anyway.
		- Could possibly add a new button to the custom YTM context menu.
	- Could have an option/toggle to select whether or not a difference in track position should result in two tracks not matching.
	- Feature: What if the extension itself kept track of songs that have been removed (without replacements) from each playlist, rather than manually keeping an external list.

	- Could consider having different popup html files for different tracklist types, if it makes sense to show significantly different options/UI for each.
	- Would it be possible somehow to use an extension context menu to select multiple tracks and edit their info in Firestore (e.g. assign their genre)?
	- It would probably also be possible to accomplish this ^ by inserting some DOM elements into tracklists. (e.g. add checkboxes to every track row and a buton / text field to set the genre, as one example/option)
	- It would also be be possible to do this ^ in the popup itself (e.g. adding more elements with the scraped tracklist like buttons, text fields, and checkboxes)
	- Instead of using a mutation observer to watch the DOM, it's probably possible to scrape the loading track metadata by watching the network requests. It might even be possible to bypass the DOM track element creation, which could speed up the whole scrape & scroll process. This would be a large undertaking though, and maybe not even possible.
		- Maybe it would be sufficient to block the loading of the track thumbnails..
		- Actually it seems that downloading the tracklist content takes considerably less time than "Waiting (TTFB)" & work happening on the server side, and I don't know how to speed the latter up.
	- Could update JSDOC callback documentation throughout code (https://jsdoc.app/tags-callback.html)
	- Including track position in saved/stored tracklists may help create simpler/clearer code in a variety of places.
	- Does it make sense to store a list of unique tracks across all playlists (including Added from Subscription & Uploaded)? Each track could include a list of all playlists to which it belongs. This would help to know which playlists are affected when a track's metadata or status changes. There would be non-trivial overhead to keep this up-to-date every time scraped data is saved in storage.
		- An alternative approach could be to have a 'Track' screen, which could have an option to 'list all playlists' to which the track belongs, which would then scrub through all stored playlists and present the most up-to-date data available. One problem is that finding a track in a tracktable in the popup is not that easy. Having the ability to select a song from the YTM page itself would be preferable, but not trivial.
	- Does it make sense to have some method to mark a song's genre in the extension's UI, which then gets stored in Firestore with the rest of the metadata?

** Style & Organization **

	- Create a new chart (digital?) for the app layout	
	- Consider using a Linter (https://www.sitepoint.com/comparison-javascript-linting-tools/)
	- Consider Grunt or something similar to merge all files into one

** OLD - Features **

V1:	
	- Store a list of all Playlists and check that the list of playlists is up to date. Let the user know if it's not. 
	- - Would it be possible to use this in order to scrub out all the old unused lists saved in Local Storgae?
	- Option to backup all extisting track lists with current date (similar to JSON idea)
	- Option to change a playlist's name
	- When storing a list, could store the timestamp so you can see the lastUsed date and then auto-delete or archive anything no longer in use

V2:
	- Progress bar for scrape (not really necessary, there are very few tracklists for which this would be beneficial)
	- Support comparison between Spotify playlists and Google mMusic or YouTube Music playlists (allowing the user to choose tracklist x and y to compare)
	- Consider feature which suggests listening to one of the albums/tracks in the 'test' playlists. 
	- Unit tests?
	- Store an "all tracks removed" list and allow the user to select if they want to add them to that list or not after it lists which have been removed
	- Feature that checks for duplicates
